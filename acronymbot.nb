# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2006 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#
=begin

== Abstract

Reply Acronym Finder URI.

== Configuration

  BotConfig << {
    :name => :AcronymBot,
    :bot_name => "acronym",
    :ch => //,
    :separator => /[\s<:>]/,
  }

=end

require 'cgi'
require 'nkf'
require 'open-uri'

module AcronymFinder
  module_function

  def acronym word
    word = CGI.escape(word)
    uri = "http://www.acronymfinder.com/#{word}.html"
    body = open(uri) do |f|
      uri = f.base_uri if f.base_uri != uri
      f.read
    end
    if /Your abbreviation search returned (\d+) meanings/ =~ body
      num = "(#{$1} meanings)"
    end
    "#{uri} #{num}"
  end
end

if __FILE__ == $0
  if ARGV.empty?
    # TODO: test
  else
    ARGV.each do |word|
      puts AcronymFinder.acronym(word)
    end
  end
  exit
end

class AcronymBot < Nadoka::NDK_Bot
  include AcronymFinder

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @bot_name = @bot_config[:bot_name] || 'acronym'
    @separator = @bot_config[:separator] || /[<:>]/
    @pattern = /^#{Regexp.quote(@bot_name)}\s*#{@separator}\s*(.+)/
 end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if @pattern =~ msg
      res = acronym(NKF.nkf('-w -Z', $1))
      send_notice(ch, "#{@bot_name}> #{res}")
    end
  end
end
