# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2004-2005 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's lisence.
#
# $Id$
#

=begin

== Abstract

sumibi client

see http://sourceforge.jp/projects/sumibi/

== Configuration

  BotConfig << {
    :name => :SumibiBot,
    :bot_name => 'sumibi',
    :ch => /nadoka/,
    :separator => /[\s<:>]/,
    :sumibi_server_url => "https://sumibi.org/cgi-bin/sumibi/stable/sumibi.cgi",
    :sumibi_server_encode => "euc-jp",
    # :sumibi_server_cert_file => "/home/xxxx/CAcert.crt",
    :join_separator => ' ',
  }

=end

require 'cgi'
require 'nkf'
require 'strscan'
require 'tempfile'

class SumibiBot < Nadoka::NDK_Bot
  SUMIBI_SERVER_CERT_DATA = <<-CERT
-----BEGIN CERTIFICATE-----
MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0
IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz
BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y
aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG
9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE5MDYy
NjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y
azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs
YXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw
Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl
cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5avIWZJV16vY
dA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zfN1SLUzm1NZ9
WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwbP7RfZHM047QS
v4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADt/UG9v
UJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQC1u+mNr0HZDzTu
IYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMMj4QssxsodyamEwC
W/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd
-----END CERTIFICATE-----
  CERT

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @bot_name = @bot_config[:bot_name] || 'eijiro'
    @separator = @bot_config[:separator] || /[<:>]/
    @pattern = /^#{Regexp.quote(@bot_name)}\s*#{@separator}\s*(.+)/

    @sumibi_server_url = @bot_config[:sumibi_server_url] || "https://sumibi.org/cgi-bin/sumibi/stable/sumibi.cgi"
    @sumibi_server_encode = @bot_config[:sumibi_server_encode] || "euc-jp"
    if @bot_config.key?(:sumibi_server_cert_file)
      @sumibi_server_cert_file = @bot_config[:sumibi_server_cert_file]
    else
      f = Tempfile.new("sumibi.nb")
      f.write(SUMIBI_SERVER_CERT_DATA)
      f.close
      @sumibi_server_cert_file = f.path
      @sumibi_server_cert_tmpfile = f # guard from GC
    end

    @join_separator = @bot_config[:join_separator] || ' '
  rescue
    send_notice(ch, NKF.nkf('-j -m0', "#{@bot_name}: #{$!}"))
    @manager.ndk_error $!
  end

  def sumibi(yomi)
    case @sumibi_server_encode
    when /euc-jp/i
      yomi = NKF.nkf("-e -m0", yomi)
    else
      raise "unknown @sumibi_server_encode(=#{@sumibi_server_encode})"
    end
    f = Tempfile.new("sumibi.nb")
    f.close
    args = [
      "wget",
      "--non-verbose",
      @sumibi_server_url,
      sprintf("--post-data=string=%s&encode=%s", CGI.escape(yomi), @sumibi_server_encode),
      "--output-document=#{f.path}"
    ]
    if @sumibi_server_cert_file
      args.push "--sslcafile=#{@sumibi_server_cert_file}"
      args.push "--sslcheckcert=1"
    end
    @logger.slog("#{@bot_name}:#{args.inspect}")
    system(*args)
    f.open
    ret = f.read
    f.close(true)
    ret
  end

  ScannerDebug = false
  def sexp_to_objs(sexp)
    s = StringScanner.new(sexp)
    stack = [[]]
    until s.eos?
      case
      when s.scan(/\(/)
        p :push if ScannerDebug
        ary = []
        stack[-1].push(ary)
        stack.push(ary)
      when s.scan(/\)/)
        p :pop if ScannerDebug
        stack.pop
      when s.scan(/\"((?:\\.|[^\"])*)\"/)
        p [:str, s[1]] if ScannerDebug
        str = s[1]
        str.gsub!(/\\(.)/, "\\&")
        stack[-1].push(str)
      when s.skip(/\s+/)
        p :skip if ScannerDebug
        # skip spaces
      when s.skip(/./)
        raise "ignore #{s.matched}"
      end
    end
    p stack if ScannerDebug
    stack[0][0]
  end

  ToKCODE = case $KCODE
            when 'SJIS'
              "-s -m0"
            when 'UTF8'
              "-w -m0"
            else # when 'EUC', 'NONE'
              "-e -m0"
            end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if @pattern === msg
      yomi = $1
      @logger.slog("#{@bot_name}<#{yomi}")
      sexp = NKF.nkf(ToKCODE, sumibi(yomi).to_s)
      @logger.slog("#{@bot_name}>#{sexp}")
      if sexp.empty?
        send_notice(ch, NKF.nkf('-j -m0', "#{@bot_name} error"))
        return
      end
      nested_array = sexp_to_objs(sexp)
      str = nested_array.collect do |array|
        array[0].to_s
      end.join(@join_separator)
      send_notice(ch, NKF.nkf('-j -m0', "#{@bot_name}: #{str}"))
    end
  rescue
    send_notice(ch, NKF.nkf("-j -m0", "#{@bot_name}: #{$!}"))
    @manager.ndk_error $!
  end
end

__END__
sexp_to_objs('') #=> nil
sexp_to_objs('()') #=> []
sexp_to_objs('(())') #=> [[]]
sexp_to_objs('(() ())') #=> [[], []]
sexp_to_objs('(("sumibi"))') #=> [["sumibi"]]
sexp_to_objs('(("foo" "bar") ("nadoka" "sumibi"))') #=> [["foo", "bar"], ["nadoka", "sumibi"]]
