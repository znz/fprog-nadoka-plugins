# -*-ruby; coding: utf-8 -*- vim:set filetype=ruby:
#
# Copyright (c) 2008 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#
=begin

== Abstract

Reply katakana with "ー".

== Configuration

  BotConfig << {
    :name => :Katakana,
    :bot_name => "-",
    :ch => //,
    :separator => /[\s<:>]/,
    # JIS
    :nkf_from_ch => "-w -m0",
    :nkf_to_ch => "-Wj -m0",
    # UTF-8
    #:nkf_from_ch => nil,
    #:nkf_to_ch => nil,
  }

=end

require 'cgi'
require 'nkf'

class Katakana < Nadoka::NDK_Bot
  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @bot_name = @bot_config[:bot_name] || 'eijiro'
    @separator = @bot_config[:separator] || /[<:>]/
    @pattern = /^#{Regexp.quote(@bot_name)}\s*#{@separator}\s*(.+)/
    @nkf_from_ch = @bot_config[:nkf_from_ch] || '-Ww -m0'
    @nkf_to_ch = @bot_config[:nkf_to_ch] || '-Ww -m0'
    katakana = [[0x30a0].pack("U"), [0x30ff].pack("U")].join("-")
    @prolonged_sound_mark = [0x30fc].pack("U")
    @prolonged_re = /#{@prolonged_sound_mark}\z/u
    @re = /[#{katakana}]+/u
 end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if @pattern =~ msg
      res = katakana(NKF.nkf(@nkf_from_ch, $1))
      send_notice(ch, NKF.nkf(@nkf_to_ch, res))
    end
  end

  def katakana sentence
    sentence = sentence.gsub!(@re) do |word|
      if @prolonged_re =~ word
        word
      else
        word+"ー"
      end
    end
    "#{@bot_name}> #{sentence}"
  end
end
