# -*-ruby-*-
#
# Copyright (c) 2009 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#

=begin

== Abstract

Reply title of URL.

== Configuration

  BotConfig << {
    :name => :TitleBot,
    :ch => //,
    :timeout => 10,
  }

=end

require 'iconv'
require 'nkf'
require 'open-uri'
require 'timeout'
require 'tmpdir'

begin
  require 'rubygems'
  require 'nokogiri'
rescue LoadError
end

module URL2Title
  module_function

  def get_title(url)
    uri = URI.parse(url)
    case uri.host
    when /localhost/, /\A127\./, /\A192\.168\./, /\A10\./
      return ["(ignored)", uri]
    end
    uri.open do |f|
      body = f.read
      case f.content_type
      when /\Atext\//
        charset = f.charset{} # without block, returns "iso-8859-1"
        if charset
          body = Iconv.conv("utf-8", charset, body)
        elsif /charset=([^;">]+)/ni =~ body
          body = Iconv.conv("utf-8", $1, body)
        end
        body = NKF.nkf("-wm0 --numchar-input", body)
        title = nil
        fragment_text = nil
        case uri.host
        when /(?!)/u
        else
          if %r"<title.*?>(.*?)</title>"miu =~ body
            title = $1
          end
          if uri.fragment && defined?(::Nokogiri)
            begin
              doc = Nokogiri::HTML(body, uri.to_s, 'utf-8')
              xpath = "//*[@id='#{uri.fragment}' or @name='#{uri.fragment}']"
              fragment_element = doc.xpath(xpath)
              # tDiary style
              unless fragment_element.xpath("span[@class='sanchor']").empty?
                fragment_element = fragment_element.xpath("..")
              end
              fragment_text = fragment_element.text
            rescue Exception => e
              fragment_text = e
            end
          end
        end
        return [(title || body), f.base_uri, fragment_text]
      when /\Aimage\//
        if f.respond_to?(:path) && f.path
          return [`identify '#{f.path}'`.sub(/\A#{Regexp.quote(f.path)}/, '').strip, f.base_uri]
        else
          return ["(unknown image format)", f.base_uri]
        end
      else
        return ["#{f.content_type} #{f.size} bytes", f.base_uri]
      end
    end
  end

  def truncate s
    if /\A(?>(.{197})....)/mu =~ s
      return $1+'...'
    else
      return s
    end
  end

  def url2title(url)
    title, base_uri, fragment_text = get_title(url)
    [truncate(title), base_uri, fragment_text]
  end
end

if __FILE__ == $0
  def u2t(url)
    URL2Title.url2title(url)
  rescue
    $!.inspect
  end
  if ARGV.empty?
    # TODO: test
  else
    ARGV.each do |url|
      p [url, u2t(url)]
    end
  end
  exit
end

class TitleBot < Nadoka::NDK_Bot
  include URL2Title

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config.fetch(:ch, //)
    end

    @same_bot = @bot_config.fetch(:same_bot, /(?!)/)
    @nkf_options = @bot_config.fetch(:nkf, "-j")
    @timeout = @bot_config.fetch(:timeout, 10)
  end

  def send_notice(ch, msg)
    msg = msg.tr("\r\n", "  ")
    if @nkf_options
      msg = NKF.nkf(@nkf_options, msg)
    end
    super(ch, msg)
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if /https?:/ === msg
      return if @state.channel_users(ccn(ch)).find{|x| @same_bot =~ x }

      url, = URI.extract(msg, ["http", "https"])
      return if url != msg
      title, base_uri, fragment_text = Timeout.timeout(@timeout) do
        url2title(url)
      end
      return unless title
      if url != base_uri.to_s
        send_notice(ch, "title bot: #{title} - #{base_uri}")
      else
        send_notice(ch, "title bot: #{title}")
      end
      if fragment_text
        @manager.ndk_error fragment_text if fragment_text.is_a?(Exception)
        send_notice(ch, "title bot:: #{fragment_text}")
      end
    end
  rescue Exception => e
    send_notice(ch, "title bot error: #{e}")
    @manager.ndk_error e
  end
end
