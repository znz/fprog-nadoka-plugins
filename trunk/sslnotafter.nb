# -*-ruby-*-
#
# Copyright (c) 2009 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#

=begin

== Abstract

Reply notAfter in SSL peer cert.

== Configuration

  BotConfig << {
    :name => :SSLnotAfter,
    :ch => //,
    :pattern => /\ASSLnotAfter\z/i,
    :host => "localhost",
    :port => 443,
    :memo => "localhost:https", # default: "#{@host}:#{@port}"
  }

  [
    "ns3.example.jp:443 (https)",
    "ns3.example.jp:465 (smtps)",
    #"ns3.example.jp:587 (submission starttls)", # starttls not supported
    "ns3.example.jp:636 (ldaps)",
    "ns3.example.jp:993 (imaps)",
    "ns3.example.jp:995 (pop3s)",
  ].each do |memo|
    if /\A([^:]+):(\d+)/ =~ memo
      host, port = $~.captures
      BotConfig << {
        :name => :SSLnotAfter,
        :ch => //,
        :pattern => /\ASSLnotAfter\z/i,
        :host => host,
        :port => port,
        :memo => memo,
      }
    end
  end

=end

require "openssl"
require "socket"

class SSLnotAfter < Nadoka::NDK_Bot
  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config.fetch(:ch, //)
    end

    @host = @bot_config[:host]
    @port = @bot_config[:port]
    @memo = @bot_config.fetch(:memo, "#{@host}:#{@port}")

    @pattern = @bot_config.fetch(:pattern, /\ASSLnotAfter\z/i)
    @bot_name = "SSLnotAfter"
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if @pattern === msg
      Thread.start do
        begin
          h = get_not_after
          if h
            not_after = h[:not_after]
            now = Time.now
            case
            when not_after < now
              status = "EXPIRED!"
            else
              rest = (not_after-now)/(60*60*24)
              status = sprintf "(%.2f days left)", rest
            end
            not_after = not_after.strftime('%Y-%m-%d %H:%M:%S %z')
            send_notice(ch, "#{@bot_name}:#{not_after} #{status} CN=#{h[:cn]}: #{@memo}")
          else
            send_notice(ch, "#{@bot_name}: unknown: #{@memo}")
          end
        rescue Exception
          send_notice(ch, "#{@bot_name}: error #{$!.inspect}: #{@memo}")
        end
      end
    end
  end

  def get_not_after
    TCPSocket.open(@host, @port) do |sock|
      ssl = OpenSSL::SSL::SSLSocket.new(sock)
      ssl.sync_close = true

      # SNI support since ruby 1.9.3
      if ssl.respond_to?(:hostname)
        ssl.hostname = host
      end

      ssl.connect
      ssl.close

      h = {}
      cert = ssl.peer_cert
      h[:not_after] = cert.not_after

      # CN = ["CN", hostname, num]
      cn = cert.subject.to_a.assoc("CN")
      if cn
        h[:cn] = cn[1]
      end

      return h
    end
    nil
  end
end
