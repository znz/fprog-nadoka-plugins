# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2007, 2010 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#

=begin

== Abstract

Say date using GNU date.


== Configuration

  BotConfig << {
    :name => :DateBot,
    :ch => /nadoka/,
  }

=end

require 'pathname'

class DateBot < Nadoka::NDK_Bot
  def bot_initialize
    if @bot_config.key?(:ch)
      @available_channel = @bot_config[:ch]
    else
      @available_channel = //
    end
  end

  ZONEINFO = Pathname.new('/usr/share/zoneinfo')
  def zone_date(zone, at=nil)
    zonepath = (ZONEINFO + zone).expand_path
    return "no such zone" unless /\A#{Regexp.quote(ZONEINFO.to_s)}\//o =~ zonepath.to_s
    zone = $'
    return "no such zone" unless zonepath.exist?
    if at
      begin
        at = Time.at(at).to_s
      rescue RangeError => e
        return e.to_s
      end
      return `TZ='#{zone}' date -d '#{at}' 2>&1`
    else
      return `TZ='#{zone}' date 2>&1`
    end
  end

  def say(ch, msg)
    send_notice(ch, NKF.nkf('-Ej -m0', "date> #{msg}".gsub(/\s+/, ' ')))
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    case NKF.nkf("-e", msg)
    when /^date>\s*([A-Za-z0-9+\-_\/]+)\s*@(\d+)\s*$/
      say(ch, zone_date($1, $2.to_i))
    when /^date>\s*([A-Za-z0-9+\-_\/]+)\s*$/
      say(ch, zone_date($1))
    when /^date>/
      # fallback
      say(ch, Time.now.to_i)
    end
  end
end
