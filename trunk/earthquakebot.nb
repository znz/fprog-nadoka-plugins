# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (C) 2008 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#

=begin

== Abstract

Check RSS of http://weather.livedoor.com/earthquake/

== Configuration

  BotConfig << {
    :name => :EarthquakeBot,
    :threshold => 3,
    :ch => '#nadoka_check',
    :tm => 30 # check interval time(minute)
    :over_message => nil #
  }

=end

require 'open-uri'
require 'rexml/document'
require 'time'
require 'kconv'

class EarthquakeBot < Nadoka::NDK_Bot
  def bot_initialize
    @uri = @bot_config.fetch(:uri, 'http://weather.livedoor.com/forecast/rss/earthquake.xml')
    @ch = @bot_config.fetch(:ch, '#nadoka_check')
    @threshold = @bot_config.fetch(:threshold, 3).to_i
    @tm = @bot_config.fetch(:tm, 30) # min
    @over = @bot_config.fetch(:over_message, nil)
    @prevtm = Time.now
    @latest = Time.now # - 60*60*24
  end

  def bot_state
    nt = Time.at(@prevtm.to_i + @tm * 60)
    "<#{self.class}: next check at #{nt.asctime}@#{@ch} latest:#{@latest}>"
  end

  def __on_privmsg prefix, ch, msg
    if /^earthquake> check/ =~ msg && ch == @ch && prefix.nick == @state.nick
      make_notice Time.now
    end
  end

  def on_timer tm
    check
  end

  def check
    tm = Time.now
    if tm.to_i - @tm * 60 > @prevtm.to_i
      make_notice tm
    end
  end

  def make_notice tm
    @prevtm = tm
    items = []
    begin
      @logger.slog "EarthquakeBot: open #{@uri}"
      doc = open(@uri) {|f| REXML::Document.new(f) }
      doc.elements.each("//item[ldWeather:earthquake and not(ldWeather:earthquake/@maximumintensity<#{@threshold})]") do |e|
        items << e
      end
    rescue Exception => e
      send_notice(@ch, "earthquake bot error: #{e}")
      @manager.ndk_error e
      return
    end
    make_notice_thread items
  end

  def make_notice_thread items
    @logger.slog "EarthquakeBot: make_notice_thread #{items.size} items"
    Thread.new do
      begin
        old_latest = @latest
        items.each do |e|
          date = Time.parse(e.elements["pubDate/text()"].to_s)
          next if date <= old_latest
          link = e.elements["link/text()"].to_s.tojis
          text = e.elements["description/text()"].to_s.tojis

          if @ch.respond_to? :each
            @ch.each do |ch|
              send_notice(ch, "earthquake rss bot: #{text} - #{link}")
              sleep 5 # Flood Protection
            end
          else
            send_notice(@ch, "earthquake rss bot: #{text} - #{link}")
            sleep 5 # Flood Protection
          end
          @latest = [date, @latest].max
        end
      rescue Exception => e
        send_notice(@ch, "earthquake rss bot error: #{e}")
        @manager.ndk_error e
      end
      send_notice(@ch, "earthquake rss bot: #{@over}") if @over
    end
  end

end
