# -*-ruby-*-
#
# Copyright (c) 2007 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#

=begin

== Abstract

Reply ML Archive URL.

== Configuration

  BotConfig << {
    :name => :MLABot,
    :ch => //,
    :same_bot => /\Amla/,
    :nkf => "-Ww -m0",
  }

=end

require "open-uri"

class MLABot < Nadoka::NDK_Bot
  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @same_bot = @bot_config[:same_bot] || /(?!)/
    @nkf_options = @bot_config.fetch(:nkf, "-Wj")
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    if /\[([a-zA-Z_0-9\-]+):(\d+)\]/ === msg
      ml, num = $1, $2
      return if @state.channel_users(ccn(ch)).find{|x| @same_bot =~ x }
      return if /\A\d+\z/ =~ ml
      uri = "http://mla.n-z.jp/?#{ml}=#{num}"
      begin
        title = nil
        open(uri) do |f|
          break unless %r!text/html! =~ f.content_type
          body = NKF.nkf("-w", f.read)
          if /<title[^<>]*>([\s\S]+)<\/title>/iu =~ body
            title = $1.gsub(/\s+/, ' ')
          end
        end
        if title
          send_notice(ch, NKF.nkf(@nkf_options, "#{uri} #{title}"))
        else
          send_notice(ch, uri)
        end
      rescue Exception
        send_notice(ch, uri)
        raise
      end
    end
  end
end
