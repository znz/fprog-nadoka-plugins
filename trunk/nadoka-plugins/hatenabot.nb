# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2005 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's lisence.
#
#
# $Id$
#
=begin

== Abstract

Reply hatena keyword URI.

== Configuration

  BotConfig << {
    :name => :HatenaBot,
    :ch => //,
    :separator => /[\s<:>]/,
  }

=end

require 'cgi'
require 'nkf'
require 'open-uri'
require 'rexml/document'

class HatenaBot < Nadoka::NDK_Bot
  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end
    @bot_name = @bot_config[:bot_name] || "hatena bot"
    @separator = @bot_config[:separator] || /[<:>]/
    @pattern = /^hatena\s+(keyword)\s*#{@separator}\s*(.+)/
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    case msg
    when @pattern
      mode, word = $1, $2
      case mode
      when 'keyword'
        res = hatena_keyword(word)
        send_notice(ch, res)
      end
    end
  end

  def hatena_keyword word
    word = CGI.escape(NKF.nkf('-w', word))
    uri = "http://d.hatena.ne.jp/keyword?word=#{word}&mode=rss&ie=utf8"
    doc = open(uri) do |io|
      REXML::Document.new(io.read)
    end
    link = doc.elements["/rdf:RDF/channel/@rdf:about"]
    unless link
      return "rss error: #{uri}"
    end
    link = link.to_s
    title = doc.elements["/rdf:RDF/item/title/text()"]
    unless title
      return "keyword not found: #{link}"
    end
    text = doc.elements["/rdf:RDF/item/description/text()"]
    if text
      text = text.to_s.gsub(/\s+/u, ' ').sub(/\A(.{47})....+/u, '\1...')
      text = "- #{text}"
    else
      text = "(description not found)"
    end
    NKF.nkf('-Wj', "#{@bot_name}: #{link} #{title} #{text}")
  rescue Exception
    $!.to_s.gsub(/\s+/, ' ')
  end
end
