# -*- coding: utf-8 -*-
# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2005, 2008 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#

=begin

== Abstract

Say time hourly.


== Configuration

  BotConfig << {
    :name => :HourlyBot,
    :channels => %w"#nadoka #nadoka_check", # say hourly
    :ch => /nadoka/, # reply now
    :format_proc => proc { |now|
      now.strftime("%y/%m/%d-%H:%M:%S")
    },
  }

=end

class HourlyBot < Nadoka::NDK_Bot
  Youbi = %w(日 月 火 水 木 金 土)

  def bot_initialize
    if @bot_config.key?(:channels)
      @channels = @bot_config[:channels].collect do |ch|
        ch = @config.canonical_channel_name(ch)
      end
    else
      @channels = nil
    end

    if @bot_config.key?(:ch)
      @available_channel = @bot_config[:ch]
    elsif @channels
      channels = '\A(?:' + @channels.collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = //
    end
    @nkf_args_send = @bot_config[:nkf_args_send] || "-Wj -m0"

    @format_proc = @bot_config.fetch(:format_proc,
      proc { |now|
        default_format(now)
      })
    @said_hour = Time.now.hour
  end

  def default_format(now)
    case
    when now.mday == 13 && now.wday == 5
      now.strftime("%Y(平成#{now.year-1988})年%m月\cB\c_\cV%d日(#{Youbi[now.wday]})\cO%H時%M分%S秒(インターネットタイム#{beat(now)})です。")
    else
      now.strftime("%Y(平成#{now.year-1988})年%m月%d日(#{Youbi[now.wday]})%H時%M分%S秒(インターネットタイム#{beat(now)})です。")
    end
  end

  def beat(now)
    "@%05.1f" % (((now.dup.gmtime.to_i+3600) % 86400) / 86.4)
  end

  def on_timer tm
    now = Time.now
    if @said_hour != now.hour
      say_time(now)
      @said_hour = now.hour
    end
  end

  def say_time(now, channels=@channels)
    return unless channels
    msg = @format_proc.call(now)
    channels.each{|ch|
      send_notice(ch, NKF.nkf(@nkf_args_send, msg))
    }
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    case NKF.nkf("-w", msg)
    when /^今?何時.*[?？]$/u, /^time$/
      say_time(Time.now, [ch])
    end
  end
end
