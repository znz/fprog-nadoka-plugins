# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (C) 2004-2005 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
# $Id$
#

=begin

== Abstract

pass on a message

== Configuration

  BotConfig << {
    :name => :MessageBot,
    :message_file => '~/nadoka/message.yaml',
    :message_logger => Logger.new('~/nadoka/message.log', 'daily'),
    :root_key => Setting_name || 'nadoka',
    :ch => /nadoka/,
    #:use_privmsg => true, # not recommend
  }

=end

require 'nkf'
require 'time'
require 'yaml/store'

class MessageBot < Nadoka::NDK_Bot

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?i:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @use_privmsg = @bot_config[:use_privmsg] || false

    @store = YAML::Store.new(@bot_config[:message_file])
    @m_logger = @bot_config[:message_logger]
    @root_key = @bot_config[:root_key] || 'message'
    load_message
    @m_logger.info "#{count_message} message(s) loaded."
  end

  def load_message
    @store.transaction do |db|
      if db.root?(@root_key)
        @h = db[@root_key] || Hash.new
      else
        @h = Hash.new
      end
    end
  end

  def save_message
    @store.transaction do |db|
      db[@root_key] = @h
    end
  end
  
  def count_message
    n = 0
    @h.each do |k,v|
      n += v.size
    end
    n
  end

  def say ch, message
    @m_logger.info message
    message = NKF.nkf('-Ej -m0', message)
    send_notice(ch, "msg: #{message}")
  end

  def say2 ch, message
    @m_logger.info message
    message = NKF.nkf('-Ej -m0', message)
    if @use_privmsg
      send_privmsg(ch, "msg: #{message}")
    else
      send_notice(ch, "msg: #{message}")
    end
  end

  def on_join prefix, ch
    return unless @available_channel === ch

    cn_u8 = NKF.nkf('-w', ccn(ch))
    nick = prefix.nick

    count = 0
    if @h.key?(cn_u8)
      @h[cn_u8].each do |h|
        if user_match(h['to'], prefix)
          count += 1
        end
      end
    end
    if 0 < count
      say2(ch, "#{nick}さんに#{count}件の伝言があります。")
    end
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    cn_u8 = NKF.nkf('-w', ccn(ch))
    nick = prefix.nick

    accept_message(prefix, ch, msg, cn_u8, nick)
    say_message(prefix, ch, msg, cn_u8, nick)
  end

  NickPattern = /(?:[A-Za-z0-9_\-\^\`]+)/

  def accept_message prefix, ch, msg, cn_u8, nick
    if /^(?:伝言|message[<:>]) (#{NickPattern}) (.+)$/eo =~ NKF.nkf('-e -m0', msg.to_s)
      to_prefix, body = $1, $2
      @m_logger.info "#{prefix} #{ch} #{msg}"
      new_h = {
        'from' => nick,
        'to' => to_prefix,
        'date' => Time.now,
        'body' => NKF.nkf('-Ew -m0', body),
      }
      list = (@h[cn_u8] ||= [])
      if list.find {|h|
          h['to'] == new_h['to'] &&
            h['from'] == new_h['from'] &&
            h['body'] == new_h['body']
        }
        @m_logger.info("previous msg is duplicated")
        say(ch, "その伝言は既に承っています > #{nick}さん")
        return
      end
      list.push(new_h)
      save_message
      say(ch, "#{to_prefix}さんへの伝言を承りました > #{nick}さん")
    end
  end

  def say_message prefix, ch, msg, cn_u8, nick
    changed = false
    if @h.key?(cn_u8)
      @h[cn_u8].delete_if do |h|
        if user_match(h['to'], prefix)
          say2(ch, "#{h['date'].strftime('%Y-%m-%d %H:%M:%S')}に#{h['from']}さんから#{h['to']}さんへ伝言「#{NKF.nkf('-We -m0', h['body'])}」")
          changed = true
        else
          false
        end
      end
    end
    save_message if changed
  end

  def user_match to_prefix, prefix
    case to_prefix
    when /\A#{NickPattern}\z/o
      to_prefix.downcase == prefix.nick.downcase
    end
  end
end

