# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (C) 2004-2005 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's lisence.
#
# $Id$
#

=begin

== Abstract

pass on a message

== Configuration

  BotConfig << {
    :name => :MessageBot,
    :message_file => '~/nadoka/message.yaml',
    :message_logger => Logger.new('~/nadoka/message.log', 'daily'),
    :root_key => Setting_name || 'nadoka',
    :ch => /nadoka/,
  }

=end

require 'nkf'
require 'time'
require 'yaml/store'

class MessageBot < Nadoka::NDK_Bot

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end

    @store = YAML::Store.new(@bot_config[:message_file])
    @m_logger = @bot_config[:message_logger]
    @root_key = @bot_config[:root_key] || 'message'
    load_message
  end

  def load_message
    @store.transaction do |db|
      if db.root?(@root_key)
        @h = db[@root_key] || Hash.new
      else
        @h = Hash.new
      end
    end
  end

  def save_message
    @store.transaction do |db|
      db[@root_key] = @h
    end
  end

  def say ch, message
    @m_logger.info message
    message = NKF.nkf('-Ej -m0', message)
    send_notice(ch, "msg: #{message}")
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    cn_u8 = NKF.nkf('-w', ccn(ch))
    nick = prefix.nick

    accept_message(prefix, ch, msg, cn_u8, nick)
    say_message(prefix, ch, msg, cn_u8, nick)
  end

  NickPattern = /(?:[A-Za-z0-9_\-\^\`]+)/

  def accept_message prefix, ch, msg, cn_u8, nick
    if /^(?:伝言|message[<:>]) (#{NickPattern}) (.+)$/eo =~ NKF.nkf('-e -m0', msg.to_s)
      to_prefix, body = $1, $2
      @m_logger.info "#{prefix} #{ch} #{msg}"
      h = {
        'from' => nick,
        'to' => to_prefix,
        'date' => Time.now,
        'body' => NKF.nkf('-Ew -m0', body),
      }
      list = (@h[cn_u8] ||= [])
      list.push(h)
      save_message
      say(ch, "#{to_prefix}さんへの伝言を承りました > #{nick}さん")
    end
  end

  def say_message prefix, ch, msg, cn_u8, nick
    changed = false
    if @h.key?(cn_u8)
      @h[cn_u8].delete_if do |h|
        if user_match(to_prefix, prefix)
          say(ch, "#{h['date'].strftime('%Y-%m-%d %H:%M:%S')}に#{h['from']}さんから#{h['to']}さんへ伝言「#{NKF.nkf('-We -m0', h['body'])}」")
          changed = true
        else
          false
        end
      end
    end
    save_message if changed
  end

  def user_match to_prefix, prefix
    case to_prefix
    when /\A#{NickPattern}\z/o
      to_prefix == prefix.nick
    end
  end
end

