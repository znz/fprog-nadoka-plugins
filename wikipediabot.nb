# -*-ruby-*- vim:set filetype=ruby:
#
# Copyright (c) 2005 Kazuhiro NISHIYAMA
#
# This program is free software with ABSOLUTELY NO WARRANTY.
# You can re-distribute and/or modify this program under
# the same terms of the Ruby's license.
#
#
# $Id$
#
=begin

== Abstract

Reply Wikipedia URI.

== Configuration

  BotConfig << {
    :name => :WikipediaBot,
    :ch => //,
    :default_lang => 'ja',
    :nkf => "-Ww -m0",
    :separator => /[\s<:>]/,
    :l_wikis => {
      'wp' => '.wikipedia.org',
      'wt' => '.wiktionary.org',
      'wikt' => '.wiktionary.org',
      'wq' => '.wikiquote.org',
      'wb' => '.wikibooks.org',
    },
    :wikis => {
      'wm' => 'meta.wikimedia.org',
      'wc' => 'commons.wikimedia.org',
      'commons' => 'commons.wikimedia.org',
      'ws' => 'wikisource.org',
      'wsp' => 'species.wikipedia.org',
    },
  }

=end

require 'cgi'
require 'nkf'
require 'open-uri'
require 'nokogiri'

module Wikipedia
  module_function

  def wikipedia word, host='en.wikipedia.org'
    # word = CGI.escape(word)
    # should not encode '/'
    word = URI.encode(word)
    # should encode '()'
    word.gsub!(/([()]+)/n) do
      '%' + $1.unpack('H2' * $1.size).join('%').upcase
    end
    uri = "https://#{host}/wiki/#{word}"
    if true # cannot use Special:Export
      doc = open(uri) do |io|
        Nokogiri::HTML(io, uri.to_s, 'utf-8')
      end
      summary = doc.css('#mw-content-text p').text
      return "#{uri} #{summary}".gsub(/\s+/, ' ').sub(/\A(.{147}).{3,}/, '\1...')
    end
  rescue Exception
    "ERROR: #{uri} #{$!.to_s.gsub(/\s+/, ' ')}"
  end
end

if __FILE__ == $0
  word = ARGV.shift
  host = ARGV.shift || 'ja.wikipedia.org'
  p Wikipedia.wikipedia(word, host)
  exit
end

class WikipediaBot < Nadoka::NDK_Bot
  include Wikipedia

  def bot_initialize
    if @bot_config.key?(:channels)
      channels = '\A(?:' + @bot_config[:channels].collect{|ch|
        Regexp.quote(ch)
      }.join('|') + ')\z'
      @available_channel = Regexp.compile(channels)
    else
      @available_channel = @bot_config[:ch] || //
    end
    @bot_name = @bot_config[:bot_name] || "wikipedia bot"
    @default_lang = @bot_config[:default_lang] || 'ja'
    @separator = @bot_config[:separator] || /[<:>]/
    @nkf_options = @bot_config.fetch(:nkf, "-Wj")
    @l_wikis = {
      'wikipedia' => '.wikipedia.org',
      'wiktionary' => '.wiktionary.org',
      'wikiquote' => '.wikiquote.org',
      'wikibooks' => '.wikibooks.org',
    }.update(@bot_config[:l_wikis]||{})
    @wikis = {
      'wikimedia' => 'meta.wikimedia.org',
      'wikicommons' => 'commons.wikimedia.org',
      'wikisource' => 'wikisource.org',
      'wikisources' => 'wikisource.org',
      'wikispecie' => 'species.wikipedia.org',
      'wikispecies' => 'species.wikipedia.org',
    }.update(@bot_config[:wikis]||{})
    @l_pattern = /^(#{@l_wikis.keys.join('|')})(?::([a-z]{2}))?\s*#{@separator}\s*(.+)/
    @pattern = /^(#{@wikis.keys.join('|')})\s*#{@separator}\s*(.+)/
    @list_pattern = /\Awiki\s*#{@separator}\s*list\z/
#    @url_pattern = %r!http://((?:ja|en)\.wikipedia\.org)/wiki/([%A-Za-z0-9()_:\-*.]+)!
  end

  def on_privmsg prefix, ch, msg
    return unless @available_channel === ch

    case msg
    when @l_pattern
      host = "#{$2 || @default_lang}#{@l_wikis[$1]}"
      reply_wikipedia(ch, NKF.nkf('-w', $3), host)
    when @pattern
      reply_wikipedia(ch, NKF.nkf('-w', $2), @wikis[$1])
    when @list_pattern
      res =
        @l_wikis.keys.sort_by{|e| [@l_wikis[e], e.size, e]}.join(',') +
        ', ' +
        @wikis.keys.sort_by{|e| [@wikis[e], e.size, e]}.join(',')
      send_notice(ch, "#{@bot_name}> #{res}")
#    when @url_pattern
#      reply_wikipedia(ch, URI.decode($2), $1)
    end
  end

  def reply_wikipedia(ch, word, host)
    res, redirect = wikipedia(word, host)
    send_notice(ch, NKF.nkf(@nkf_options, "#{@bot_name}> #{res}"))
    if redirect
      res, redirect = wikipedia(redirect, host)
      send_notice(ch, NKF.nkf(@nkf_options, "#{@bot_name}> #{res}"))
    end
  end
end
